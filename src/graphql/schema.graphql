type Query {
  posts(query: String): [Post!]!
  users(query: String): [User!]!
  comments(query: String): [Comment!]!
}
type Mutation {
  createUser(input: CreateUserInput): User!
  deleteUser(userId: ID!): User!
  updateUser(id: ID!, input: UpdateUserInput): User!
  createPost(input: CreatePostInput): Post!
  deletePost(postId: ID!): Post!
  updatePost(postId: ID!, input: UpdatePostInput): Post!
  createComment(input: CreateCommentInput): Comment!
  updateComment(input: UpdateCommentInput): Comment!
  deleteComment(commentId: ID!): Comment!
}
type Subscription {
  comment: CommentSubscriptionPayload!
  post: PostSubscriptionPaylod!
}
input CreateUserInput {
  name: String!
  email: String!
  age: Int
}
input UpdateUserInput {
  name: String
  email: String
  age: Int
}
input CreatePostInput {
  title: String!
  body: String!
  publish: Boolean!
  authorId: ID!
}
input UpdatePostInput {
  title: String
  body: String
  published: Boolean
}
input CreateCommentInput {
  content: String!
  userId: ID!
  postId: ID!
}
input UpdateCommentInput {
  commentId: String
  text: String
}
type User {
  id: ID!
  name: String!
  email: String!
  posts: [Post]!
  comments: [Comment!]!
}
type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment!]!
}
type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post!
}
enum MutationType {
  CREATED
  UPDATED
  DELETED
}
type PostSubscriptionPaylod {
  mutation: MutationType!
  data: Post!
}
type CommentSubscriptionPayload {
  mutation: MutationType!
  data: Comment!
}
